{"ast":null,"code":"// import './game.css'\n// import React, { useState, useEffect } from 'react'\n// import axios from 'axios';\n// import NavBar from './navBar'\n// import NavCenter from './navCenter'\n\n// const handlePickCard=( )=>{\n\n// }\n\n// function HomeLayout() {\n//   // const [playedCard, setPlayedCard] = useState([]);\n//   // const [gameCard, setGameCard] = useState([]);\n\n//   const [displayedCard, setDisplayedCard] = useState(null);\n//   const [userHand, setUserHand] = useState([]);\n//   const [compHand, setCompHand] = useState([]);\n//   const [availableCards, setAvailableCards] = useState([]);\n//   const [userTurn, setUserTurn] = useState(false);\n\n//   useEffect(() => {\n//     axios.get('http://localhost:5555/deck')\n//       .then(response => {\n//         const deck = response.data.deck;\n//         setDisplayedCard(deck.pop()); // Set the displayed card from the top of the deck\n//         setUserHand([...deck.slice(0, 4)]); // Initial user hand (4 cards)\n//         setCompHand([...deck.slice(4, 8)]); // Initial comp hand (4 cards)\n//         setAvailableCards([...deck.slice(8)]); // Remaining cards for available cards\n//         setUserTurn(true);\n//       })\n//       .catch(error => {\n//         console.error('Error fetching deck:', error);\n//       });\n//   }, []);\n\n//   // const startGame = () => {\n//   //   axios.get('http://localhost:5555/start_game')\n//   //     .then(response => {\n//   //       setDisplayedCard(response.data.displayed_card);\n//   //       setUserTurn(true);\n//   //     })\n//   //     .catch(error => {\n//   //       console.error('Error starting the game:', error);\n//   //     });\n//   // };\n\n//   const playCard = (cardIndex) => {\n//     // Implement the logic to play a card\n//     // Update the 'userTurn', 'displayedCard', 'userHand', 'compHand', and 'availableCards' state accordingly\n//     // Make a POST request to '/play_card' endpoint on the Flask server\n//   };\n\n//   return (\n//     <div className='homeLayout-crd'>\n//       <NavBar  /* ----------------------------add username as prop from Cookie  -----------------*/ />  \n//       <NavCenter  /*-----------------------   add games won Prop for Running   -----------------------------------*/ />\n\n//       <div className='crd-wrap'/*-------  User Cards Section  ---------*/>\n//         <div className='userDec-crd'>\n//         <h2>User Cards</h2>\n//         {userHand.map((card, index) => (\n//           <div  className='cardDec-crd' key={index} onClick={() => playCard(index)}>\n//             {card.rank} of {card.suit}\n//           </div>\n//         ))}\n//      </div>\n//         <div className='crd-shell'>\n//             <div className='cardDec-crd'  onClick={handlePickCard}/*-------  Pick Cards Section  ---------*/ > \n//             <h2>Pick Card</h2>\n//             </div>\n\n//             <div className='gamedec-crd' /*-------  Game Table Section  ---------*/>\n//               <p>Game Table </p>\n//                 <div className='crdd-wrp'>\n//                 <div className='crd-crd'/*-------  Played Card Section  ---------*/>\n//                 <h2>Played Card</h2>\n//                 </div>\n\n//                 <div className='crd-crd'/*-------  Game Card Section  ---------*/>\n//                 <h2>Game Card</h2>\n//                 <ul>\n//                   {displayedCard.map((card, index) => (\n//                     <li key={index}>\n//                     {card.rank} of {card.suit}\n//                     </li>\n//                   ))}\n//                </ul>\n\n//                 </div>\n\n//                 </div>\n//             </div>\n//         </div>\n//         <div className='pcDec-crd' /*-------  pc Cards Section  ---------*/>\n//           <h2>pc Cards</h2>\n//         </div>\n//       </div>\n//       <div className='btn'>\n//         <button>Quit Game</button>\n//       </div>\n//     </div>\n//   )\n// }\n\n// export default HomeLayout","map":{"version":3,"names":[],"sources":["/media/mgkedits/mgkEdits/mgk-development/code/phase-4-project/Poker-Full-Game/client/src/components/game/homeLayout.js"],"sourcesContent":["// import './game.css'\n// import React, { useState, useEffect } from 'react'\n// import axios from 'axios';\n// import NavBar from './navBar'\n// import NavCenter from './navCenter'\n\n\n// const handlePickCard=( )=>{\n\n// }\n\n// function HomeLayout() {\n//   // const [playedCard, setPlayedCard] = useState([]);\n//   // const [gameCard, setGameCard] = useState([]);\n\n//   const [displayedCard, setDisplayedCard] = useState(null);\n//   const [userHand, setUserHand] = useState([]);\n//   const [compHand, setCompHand] = useState([]);\n//   const [availableCards, setAvailableCards] = useState([]);\n//   const [userTurn, setUserTurn] = useState(false);\n\n//   useEffect(() => {\n//     axios.get('http://localhost:5555/deck')\n//       .then(response => {\n//         const deck = response.data.deck;\n//         setDisplayedCard(deck.pop()); // Set the displayed card from the top of the deck\n//         setUserHand([...deck.slice(0, 4)]); // Initial user hand (4 cards)\n//         setCompHand([...deck.slice(4, 8)]); // Initial comp hand (4 cards)\n//         setAvailableCards([...deck.slice(8)]); // Remaining cards for available cards\n//         setUserTurn(true);\n//       })\n//       .catch(error => {\n//         console.error('Error fetching deck:', error);\n//       });\n//   }, []);\n\n//   // const startGame = () => {\n//   //   axios.get('http://localhost:5555/start_game')\n//   //     .then(response => {\n//   //       setDisplayedCard(response.data.displayed_card);\n//   //       setUserTurn(true);\n//   //     })\n//   //     .catch(error => {\n//   //       console.error('Error starting the game:', error);\n//   //     });\n//   // };\n\n//   const playCard = (cardIndex) => {\n//     // Implement the logic to play a card\n//     // Update the 'userTurn', 'displayedCard', 'userHand', 'compHand', and 'availableCards' state accordingly\n//     // Make a POST request to '/play_card' endpoint on the Flask server\n//   };\n\n//   return (\n//     <div className='homeLayout-crd'>\n//       <NavBar  /* ----------------------------add username as prop from Cookie  -----------------*/ />  \n//       <NavCenter  /*-----------------------   add games won Prop for Running   -----------------------------------*/ />\n      \n//       <div className='crd-wrap'/*-------  User Cards Section  ---------*/>\n//         <div className='userDec-crd'>\n//         <h2>User Cards</h2>\n//         {userHand.map((card, index) => (\n//           <div  className='cardDec-crd' key={index} onClick={() => playCard(index)}>\n//             {card.rank} of {card.suit}\n//           </div>\n//         ))}\n//      </div>\n//         <div className='crd-shell'>\n//             <div className='cardDec-crd'  onClick={handlePickCard}/*-------  Pick Cards Section  ---------*/ > \n//             <h2>Pick Card</h2>\n//             </div>\n\n//             <div className='gamedec-crd' /*-------  Game Table Section  ---------*/>\n//               <p>Game Table </p>\n//                 <div className='crdd-wrp'>\n//                 <div className='crd-crd'/*-------  Played Card Section  ---------*/>\n//                 <h2>Played Card</h2>\n//                 </div>\n                \n//                 <div className='crd-crd'/*-------  Game Card Section  ---------*/>\n//                 <h2>Game Card</h2>\n//                 <ul>\n//                   {displayedCard.map((card, index) => (\n//                     <li key={index}>\n//                     {card.rank} of {card.suit}\n//                     </li>\n//                   ))}\n//                </ul>\n\n//                 </div>\n        \n//                 </div>\n//             </div>\n//         </div>\n//         <div className='pcDec-crd' /*-------  pc Cards Section  ---------*/>\n//           <h2>pc Cards</h2>\n//         </div>\n//       </div>\n//       <div className='btn'>\n//         <button>Quit Game</button>\n//       </div>\n//     </div>\n//   )\n// }\n\n// export default HomeLayout"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}