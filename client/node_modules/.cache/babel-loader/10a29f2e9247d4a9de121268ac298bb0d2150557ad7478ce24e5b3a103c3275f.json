{"ast":null,"code":"var _jsxFileName = \"/home/sule/Development/Flask/poker-react-app/src/components/GamePage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GamePage = () => {\n  _s();\n  const [userCards, setUserCards] = useState([]);\n  const [computerCards, setComputerCards] = useState([]);\n  const [displayedCard, setDisplayedCard] = useState(null);\n  useEffect(() => {\n    initializeGame();\n  }, []);\n  const initializeGame = async () => {\n    try {\n      // Fetch user and computer cards from the server\n      const response = await axios.get('/deck');\n      const {\n        deck\n      } = response.data;\n\n      // Set user and computer cards\n      setUserCards([deck[0], deck[1]]);\n      setComputerCards([deck[2], deck[3]]);\n\n      // Set the displayed card\n      setDisplayedCard(deck[4]);\n    } catch (error) {\n      console.error('Error initializing game:', error);\n    }\n  };\n  const shuffleDeck = async () => {\n    try {\n      // Send a POST request to shuffle the deck\n      await axios.post('/shuffle');\n      // Re-initialize the game after shuffling\n      initializeGame();\n    } catch (error) {\n      console.error('Error shuffling deck:', error);\n    }\n  };\n  const drawCard = async () => {\n    try {\n      // Send a POST request to draw a card\n      const response = await axios.post('/draw');\n      const {\n        card\n      } = response.data;\n\n      // Add the drawn card to the user's cards\n      setUserCards(prevCards => [...prevCards, card]);\n    } catch (error) {\n      console.error('Error drawing card:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-container\",\n      children: userCards.map((card, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card\",\n        children: [card.rank, \" of \", card.suit]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"displayed-card\",\n      children: displayedCard && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card\",\n        children: [displayedCard.rank, \" of \", displayedCard.suit]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-container\",\n      children: computerCards.map((card, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card\",\n        children: [card.rank, \" of \", card.suit]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: shuffleDeck,\n        children: \"Shuffle Deck\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: drawCard,\n        children: \"Draw Card\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n};\n_s(GamePage, \"XT7hU/2AJr+ENR84xjqHrcT1SKQ=\");\n_c = GamePage;\nexport default GamePage;\nvar _c;\n$RefreshReg$(_c, \"GamePage\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","GamePage","_s","userCards","setUserCards","computerCards","setComputerCards","displayedCard","setDisplayedCard","initializeGame","response","get","deck","data","error","console","shuffleDeck","post","drawCard","card","prevCards","className","children","map","index","rank","suit","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/home/sule/Development/Flask/poker-react-app/src/components/GamePage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst GamePage = () => {\n  const [userCards, setUserCards] = useState([]);\n  const [computerCards, setComputerCards] = useState([]);\n  const [displayedCard, setDisplayedCard] = useState(null);\n\n  useEffect(() => {\n    initializeGame();\n  }, []);\n\n  const initializeGame = async () => {\n    try {\n      // Fetch user and computer cards from the server\n      const response = await axios.get('/deck');\n      const { deck } = response.data;\n\n      // Set user and computer cards\n      setUserCards([deck[0], deck[1]]);\n      setComputerCards([deck[2], deck[3]]);\n\n      // Set the displayed card\n      setDisplayedCard(deck[4]);\n    } catch (error) {\n      console.error('Error initializing game:', error);\n    }\n  };\n\n  const shuffleDeck = async () => {\n    try {\n      // Send a POST request to shuffle the deck\n      await axios.post('/shuffle');\n      // Re-initialize the game after shuffling\n      initializeGame();\n    } catch (error) {\n      console.error('Error shuffling deck:', error);\n    }\n  };\n\n  const drawCard = async () => {\n    try {\n      // Send a POST request to draw a card\n      const response = await axios.post('/draw');\n      const { card } = response.data;\n\n      // Add the drawn card to the user's cards\n      setUserCards((prevCards) => [...prevCards, card]);\n    } catch (error) {\n      console.error('Error drawing card:', error);\n    }\n  };\n\n  return (\n    <div className=\"game-container\">\n      <div className=\"card-container\">\n        {userCards.map((card, index) => (\n          <div key={index} className=\"card\">\n            {card.rank} of {card.suit}\n          </div>\n        ))}\n      </div>\n\n      <div className=\"displayed-card\">\n        {displayedCard && (\n          <div className=\"card\">\n            {displayedCard.rank} of {displayedCard.suit}\n          </div>\n        )}\n      </div>\n\n      <div className=\"card-container\">\n        {computerCards.map((card, index) => (\n          <div key={index} className=\"card\">\n            {card.rank} of {card.suit}\n          </div>\n        ))}\n      </div>\n\n      <div className=\"button-container\">\n        <button onClick={shuffleDeck}>Shuffle Deck</button>\n        <button onClick={drawCard}>Draw Card</button>\n      </div>\n    </div>\n  );\n};\n\nexport default GamePage;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}