{"ast":null,"code":"var _jsxFileName = \"/home/sule/Development/Flask/poker-react-app/src/components/GamePage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GamePage = () => {\n  _s();\n  const [userCards, setUserCards] = useState([]);\n  const [displayedCard, setDisplayedCard] = useState(null);\n  useEffect(() => {\n    // Fetch the initial displayed card when the component mounts\n    fetchDisplayedCard();\n  }, []);\n  const fetchDisplayedCard = async () => {\n    try {\n      // Send a GET request to start the game and get the displayed card\n      const response = await axios.get('/start_game');\n      const {\n        displayed_card: displayedCard\n      } = response.data;\n\n      // Set the displayed card in the state\n      setDisplayedCard(displayedCard);\n    } catch (error) {\n      console.error('Error starting the game:', error);\n    }\n  };\n  const drawCard = async () => {\n    try {\n      // Send a POST request to draw a card\n      const response = await axios.post('/draw');\n      const {\n        card\n      } = response.data;\n\n      // Add the drawn card to the user's cards\n      setUserCards(prevCards => [...prevCards, card]);\n    } catch (error) {\n      console.error('Error drawing card:', error);\n    }\n  };\n  const playCard = async cardChoice => {\n    try {\n      // Send a POST request to play a card\n      await axios.post('/play_card', {\n        card_choice: cardChoice\n      });\n\n      // After playing the card, fetch the new displayed card\n      fetchDisplayedCard();\n    } catch (error) {\n      console.error('Error playing card:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Card Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Displayed Card\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), displayedCard && /*#__PURE__*/_jsxDEV(\"img\", {\n        src: `path/to/card/images/${displayedCard}.png`,\n        alt: displayedCard\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 27\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Your Cards\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: userCards.map((card, index) => /*#__PURE__*/_jsxDEV(\"img\", {\n          src: `path/to/card/images/${card}.png`,\n          alt: card\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: drawCard,\n        children: \"Draw a Card\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), userCards.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => playCard(userCards[0]),\n        children: \"Play Card\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n_s(GamePage, \"S6w2sZRRbty7kt3L8Gbjym0mGdk=\");\n_c = GamePage;\nexport default GamePage;\nvar _c;\n$RefreshReg$(_c, \"GamePage\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","GamePage","_s","userCards","setUserCards","displayedCard","setDisplayedCard","fetchDisplayedCard","response","get","displayed_card","data","error","console","drawCard","post","card","prevCards","playCard","cardChoice","card_choice","children","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","map","index","onClick","length","_c","$RefreshReg$"],"sources":["/home/sule/Development/Flask/poker-react-app/src/components/GamePage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst GamePage = () => {\n  const [userCards, setUserCards] = useState([]);\n  const [displayedCard, setDisplayedCard] = useState(null);\n\n  useEffect(() => {\n    // Fetch the initial displayed card when the component mounts\n    fetchDisplayedCard();\n  }, []);\n\n  const fetchDisplayedCard = async () => {\n    try {\n      // Send a GET request to start the game and get the displayed card\n      const response = await axios.get('/start_game');\n      const { displayed_card: displayedCard } = response.data;\n\n      // Set the displayed card in the state\n      setDisplayedCard(displayedCard);\n    } catch (error) {\n      console.error('Error starting the game:', error);\n    }\n  };\n\n  const drawCard = async () => {\n    try {\n      // Send a POST request to draw a card\n      const response = await axios.post('/draw');\n      const { card } = response.data;\n\n      // Add the drawn card to the user's cards\n      setUserCards((prevCards) => [...prevCards, card]);\n    } catch (error) {\n      console.error('Error drawing card:', error);\n    }\n  };\n\n  const playCard = async (cardChoice) => {\n    try {\n      // Send a POST request to play a card\n      await axios.post('/play_card', { card_choice: cardChoice });\n\n      // After playing the card, fetch the new displayed card\n      fetchDisplayedCard();\n    } catch (error) {\n      console.error('Error playing card:', error);\n    }\n  };\n\n  return (\n    <div>\n      <h1>Card Game</h1>\n\n      {/* Display the current displayed card */}\n      <div>\n        <h2>Displayed Card</h2>\n        {displayedCard && <img src={`path/to/card/images/${displayedCard}.png`} alt={displayedCard} />}\n      </div>\n\n      {/* Display the user's cards */}\n      <div>\n        <h2>Your Cards</h2>\n        <div>\n          {userCards.map((card, index) => (\n            <img key={index} src={`path/to/card/images/${card}.png`} alt={card} />\n          ))}\n        </div>\n      </div>\n\n      {/* Buttons for drawing a card and playing a card */}\n      <div>\n        <button onClick={drawCard}>Draw a Card</button>\n\n        {/* Example: Play the first card in the user's hand */}\n        {userCards.length > 0 && (\n          <button onClick={() => playCard(userCards[0])}>Play Card</button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default GamePage;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}